generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String              @id @default(uuid())
  name                 String?
  surname              String?
  email                String?
  imageUrl             String?
  profileTitle         String?
  profileDescription   String?
  location             String?
  rating               Int?                @default(0)
  createdAt            DateTime            @default(now())
  languageId           Int?                @default(1)
  displacementMethodId Int?
  role                 Int?                @default(1)
  collaborations       Collaboration[]
  receivedMessages     Message[]           @relation("Receiver")
  sentMessages         Message[]           @relation("Sender")
  receivedProposals    Proposal[]          @relation("Receiver")
  proposals            Proposal[]          @relation("User")
  recommendations      Recommendation[]    @relation("User")
  recommendation       Recommendation[]    @relation("Receiver")
  displacementMethod   DisplacementMethod? @relation(fields: [displacementMethodId], references: [id])
  language             Language?           @relation(fields: [languageId], references: [id])
  tags                 Tag[]               @relation("TagToUser")
}

model Tag {
  id    Int     @id @default(autoincrement())
  title String?
  users User[]  @relation("TagToUser")
}

model DisplacementMethod {
  id    Int     @id @default(autoincrement())
  title String?
  users User[]
}

model Recommendation {
  id         Int     @id @default(autoincrement())
  userId     String
  user       User    @relation("User", fields: [userId], references: [id])
  receiverId String
  receiver   User    @relation("Receiver", fields: [receiverId], references: [id])
  title      String?
  text       String?
}

model Collaboration {
  id          Int       @id @default(autoincrement())
  userId      String
  title       String?
  description String?
  date        DateTime?
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
}

model Language {
  id    Int     @id @default(autoincrement())
  title String?
  users User[]
}

model Proposal {
  id          Int       @id @default(autoincrement())
  userId      String
  receiverId  String
  title       String?
  description String?
  Message     Message[]
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  user        User      @relation("User", fields: [userId], references: [id])
}

model Message {
  id         Int       @id @default(autoincrement())
  senderId   String
  receiverId String
  content    String?
  ProposalId Int?
  proposal   Proposal? @relation(fields: [ProposalId], references: [id])
  receiver   User      @relation("Receiver", fields: [receiverId], references: [id])
  sender     User      @relation("Sender", fields: [senderId], references: [id])
}

model Role {
  id    Int     @id @default(autoincrement())
  title String?
}
